Based on the ER diagram, we derive the following relations:

1. Book(BookID, Title, ISBN, Price, PublicationYear, Genre, StockQuantity, PublisherID)
FDs:

BookID â†’ Title, ISBN, Price, PublicationYear, Genre, StockQuantity, PublisherID

ISBN â†’ BookID, Title (if ISBN is unique per book)

2. Author(AuthorID, Name, Bio, Email)
FDs:

AuthorID â†’ Name, Bio, Email

3. Publisher(PublisherID, Name, Address, ContactEmail, Website)
FDs:

PublisherID â†’ Name, Address, ContactEmail, Website

4. BookAuthor(BookID, AuthorID, Role)
FDs:

(BookID, AuthorID) â†’ Role

Normalisation to 3NF:
âœ… All attributes must be in:
1NF: Atomic values (already true)

2NF: No partial dependencies (true if every non-prime attribute is fully dependent on the whole key)

3NF: No transitive dependencies (non-prime attributes depend only on keys)

 Relation: Book
Initial:
Book(BookID, Title, ISBN, Price, PublicationYear, Genre, StockQuantity, PublisherID)
FD: BookID â†’ all other attributes

This is in 3NF if:

BookID is the primary key

All other attributes are dependent only on BookID

ðŸŸ¡ If we assume ISBN is also a candidate key (i.e., unique per book), we might need to separate it to avoid redundancy.

But if BookID is the system's primary key, then the relation is already in 3NF.

âœ… No transitive dependencies â€” Already in 3NF.

 Relation: Author
Author(AuthorID, Name, Bio, Email)
FD: AuthorID â†’ Name, Bio, Email
âœ… Already in 3NF.

 Relation: Publisher
Publisher(PublisherID, Name, Address, ContactEmail, Website)
FD: PublisherID â†’ Name, Address, ContactEmail, Website
âœ… Already in 3NF.

 Relation: BookAuthor
BookAuthor(BookID, AuthorID, Role)
FD: (BookID, AuthorID) â†’ Role
âœ… Composite key (BookID, AuthorID), fully determines Role
âœ… Already in 3NF.

âœ… Final 3NF Relations
Book(BookID, Title, ISBN, Price, PublicationYear, Genre, StockQuantity, PublisherID)

Author(AuthorID, Name, Bio, Email)

Publisher(PublisherID, Name, Address, ContactEmail, Website)

BookAuthor(BookID, AuthorID, Role)